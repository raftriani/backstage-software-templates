apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: python-template
  title: Python template com ArgocD
  description: Cria uma aplicação Python e sua aplicação Argo
spec:
  owner: development
  type: service

  parameters:
    - title: Etapas
      required:
        - component_id
        - environment
      properties:
        component_id:
          title: Nome da aplicação
          type: string
          description: Cria um microserviço em Python
          pattern: '^([a-zA-Z][a-zA-Z0-9]*)(-[a-zA-Z0-9]+)*$'
        environment:
          title: Environment
          type: string
          description: Ambiente que será o deploy
          enum:
            - dev
            - prod

  steps:
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./template
        values:
          app_name: ${{parameters.component_id}}
          app_env: ${{parameters.environment}}

    - id: publish
      name: Publish
      action: publish:github
      input:
        description: This is ${{ parameters.component_id }}
        repoUrl: github.com?owner=RafaelTriani&repo=${{parameters.component_id}}
        protectDefaultBranch: false
        repoVisibility: public

    - id: create-argocd-app-curl
  name: Create ArgoCD Application via API
  action: run:shell
  input:
    command: 'curl'
    args:
      - '-X'
      - 'POST'
      - 'https://argocd.test.com/api/v1/applications'
      - '-H'
      - 'Authorization: Bearer sxuq5iHmzKTgUnpa'
      - '-H'
      - 'Content-Type: application/json'
      - '-d'
      - '{"metadata":{"name":"${{ parameters.component_id }}","namespace":"argocd"},"spec":{"project":"default","source":{"repoURL":"${{ steps.publish.output.remoteUrl }}","targetRevision":"HEAD","path":"."},"destination":{"server":"https://kubernetes.default.svc","namespace":"${{ parameters.component_id }}"},"syncPolicy":{"automated":{"prune":true,"selfHeal":true}}}}'

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: "/catalog-info.yaml"

  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
