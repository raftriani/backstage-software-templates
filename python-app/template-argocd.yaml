apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: python-template
  title: Python template com ArgocD
  description: Cria uma aplicação Python e sua aplicação Argo
spec:
  owner: development
  type: service

  parameters:
    - title: Etapas
      required:
        - component_id
        - environment
      properties:
        component_id:
          title: Nome da aplicação
          type: string
          description: Cria um microserviço em Python
          pattern: '^([a-zA-Z][a-zA-Z0-9]*)(-[a-zA-Z0-9]+)*$'
        environment:
          title: Environment
          type: string
          description: Ambiente que será o deploy
          enum:
            - dev
            - prod

  steps:
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./template
        values:
          app_name: ${{parameters.component_id}}
          app_env: ${{parameters.environment}}

    - id: publish
      name: Publish
      action: publish:github
      input:
        description: This is ${{ parameters.component_id }}
        repoUrl: github.com?owner=RafaelTriani&repo=${{parameters.component_id}}
        protectDefaultBranch: false
        repoVisibility: public

    - id: create-argocd-app-api
      name: Cria ArgoCD aplicação via API
      action: http:backstage:request
      input:
         method: 'POST'
         url: 'argocd.test.com/api/v1/applications'
         headers:
           Authorization: 'Bearer sxuq5iHmzKTgUnpa'
           Content-Type: 'application/json'
         body:
           metadata:
             name: '${{ parameters.repoName }}'
             namespace: 'argocd'
           spec:
             project: 'default'
             source:
               repoURL: 'https://github.com/raftriani/${{ parameters.repoName }}'
               targetRevision: 'HEAD'
               path: '.'
             destination:
               server: 'https://kubernetes.default.svc'
               namespace: '${{ parameters.repoName || "default" }}'
             syncPolicy:
               automated:
                 prune: true
                 selfHeal: true

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: "/catalog-info.yaml"

  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
