apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: python-template
  title: Python template com ArgocD
  description: Cria uma aplicação Python e sua aplicação Argo
spec:
  owner: development
  type: service

  parameters:
    - title: Etapas
      required:
        - component_id
        - environment
      properties:
        component_id:
          title: Nome da aplicação
          type: string
          description: Cria um microserviço em Python
          pattern: '^([a-zA-Z][a-zA-Z0-9]*)(-[a-zA-Z0-9]+)*$'
        environment:
          title: Environment
          type: string
          description: Ambiente que será o deploy
          enum:
            - dev
            - prod

  steps:
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./template
        values:
          app_name: ${{parameters.component_id}}
          app_env: ${{parameters.environment}}

    - id: publish
      name: Publish
      action: publish:github
      input:
        description: This is ${{ parameters.component_id }}
        repoUrl: github.com?owner=RafaelTriani&repo=${{parameters.component_id}}
        protectDefaultBranch: false
        repoVisibility: public

    - id: test-argocd-connection
      name: Test ArgoCD Connection
      action: run:shell
      input:
        command: 'curl'
        args:
          - '-k'  # Ignorar certificados SSL inválidos
          - '-L'
          - '-v'
          - '-H'
          - 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJhcmdvY2QiLCJzdWIiOiJhZG1pbjpsb2dpbiIsImV4cCI6MTc1NzUwMzY2OSwibmJmIjoxNzU3NDE3MjY5LCJpYXQiOjE3NTc0MTcyNjksImp0aSI6IjBmNjM3ODgxLTUyODQtNDRjOS1iNTFjLWQ4MTQ4OGRmODc5ZCJ9.l2Tgc98CK1b4wuZZ8kBYTut-5782rkNBHcZ48WvssqA'
          - 'https://argocd.test.com/api/v1/version'

    - id: create-argocd-app-curl
      name: Create ArgoCD Application via API
      action: run:shell
      input:
       command: 'curl'
       args:
          - '-k'  # Ignorar certificados SSL inválidos
          - '-L'  # Seguir redirects
          - '-X'
          - 'POST'
          - 'https://argocd.test.com/api/v1/applications'
          - '-H'
          - 'Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJhcmdvY2QiLCJzdWIiOiJhZG1pbjpsb2dpbiIsImV4cCI6MTc1NzUwMzY2OSwibmJmIjoxNzU3NDE3MjY5LCJpYXQiOjE3NTc0MTcyNjksImp0aSI6IjBmNjM3ODgxLTUyODQtNDRjOS1iNTFjLWQ4MTQ4OGRmODc5ZCJ9.l2Tgc98CK1b4wuZZ8kBYTut-5782rkNBHcZ48WvssqA'
          - '-H'
          - 'Content-Type: application/json'
          - '-d'
          - |
            {
              "metadata": {
                "name": "${{ parameters.component_id }}",
                "namespace": "argocd"
              },
              "spec": {
                "project": "default",
                "source": {
                  "repoURL": "${{ steps.publish.output.remoteUrl }}",
                  "targetRevision": "HEAD",
                  "path": "."
                },
                "destination": {
                  "server": "https://kubernetes.default.svc",
                  "namespace": "${{ parameters.namespace || 'default' }}"
                },
                "syncPolicy": {
                  "automated": {
                    "prune": true,
                    "selfHeal": true
                  }
                }
              }
            }
    
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: "/catalog-info.yaml"

  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
