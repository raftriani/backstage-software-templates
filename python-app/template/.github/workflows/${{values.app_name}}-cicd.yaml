name: ${{values.app_name}}-cicd

on:
  push:
    paths:
      - src/**
      - charts/**
      - Dockerfile
      - requirements.txt
    branches:
      - main
  workflow_dispatch:

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Shorten commit id
        shell: bash
        run: |
          echo "COMMIT_ID=${GITHUB_SHA::6}" >> "$GITHUB_ENV"
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: raftriani/${{values.app_name}}:${{ env.COMMIT_ID }}
    outputs:
      commit_id: ${{ env.COMMIT_ID }}

  cd:
    needs: ci
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.TOKEN_GITHUB }}
          fetch-depth: 0

      - name: Configure Git
        shell: bash
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Pull latest changes
        shell: bash
        run: |
          git fetch origin
          git reset --hard origin/main

      - name: Modify values file
        shell: bash
        run: |
          echo ${{needs.ci.outputs.commit_id}}
          pip install yq
          yq -Yi '.image.tag = "${{needs.ci.outputs.commit_id}}"' charts/${{values.app_name}}/values-dev.yaml

      - name: Commit and push changes
        shell: bash
        run: |
          # Verificar se há mudanças
          if git diff --quiet; then
            echo "Nenhuma mudança detectada"
            exit 0
          fi
          
          # Adicionar mudanças
          git add charts/${{values.app_name}}/values-dev.yaml
          
          # Fazer commit
          git commit -m "Updates values-dev.yaml with commit ${{needs.ci.outputs.commit_id}}"
          
          # Tentar push com retry em caso de conflito
          max_attempts=3
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Tentativa $attempt de push..."
            
            if git push origin main; then
              echo "Push realizado com sucesso!"
              break
            else
              echo "Push falhou, tentando rebase..."
              git fetch origin
              git rebase origin/main
              
              if [ $? -ne 0 ]; then
                echo "Rebase falhou, resetando e tentando novamente..."
                git rebase --abort
                git reset --hard origin/main
                yq -Yi '.image.tag = "${{needs.ci.outputs.commit_id}}"' charts/${{values.app_name}}/values-dev.yaml
                git add charts/${{values.app_name}}/values-dev.yaml
                git commit -m "Updates values-dev.yaml with commit ${{needs.ci.outputs.commit_id}}"
              fi
              
              attempt=$((attempt + 1))
              
              if [ $attempt -gt $max_attempts ]; then
                echo "Falha após $max_attempts tentativas"
                exit 1
              fi
              
              sleep 2
            fi
          done

      - name: Install argocd
        shell: bash
        run: |
          # URL correta para download do ArgoCD CLI
          curl -ksSL -o argocd https://github.com/argoproj/argo-cd/releases/download/v2.13.1/argocd-linux-amd64
          chmod +x argocd
          sudo mv ./argocd /usr/local/bin/argocd

      - name: Setup port-forward for ArgoCD
        shell: bash
        run: |
          # Configurar port-forward para acessar ArgoCD
          kubectl port-forward -n ingress-nginx svc/ingress-nginx-controller 8080:443 &
          sleep 5

      - name: ArgoCD login
        shell: bash
        run: |
          argocd login argocd-server.argocd \
            --insecure  \
            --grpc-web \
            --username admin \
            --password  ${{ secrets.ARGOCD_PASSWORD }}

      - name: Ensure ArgoCD repo and app
        shell: bash
        run: |
          # Usar token diretamente na URL (mais simples e confiável)
          repo_url="https://github.com/RafaelTriani/${{values.app_name}}.git"
          repo_url_with_token="https://${{ secrets.TOKEN_GITHUB }}@github.com/RafaelTriani/python-app-work.git"
          
          # Verificar se o repo já existe, se não, adicionar
          if ! argocd repo list | grep -q "$repo_url"; then
            echo "Adicionando repositório com token..."
            argocd repo add "$repo_url_with_token" \
              --type git \
              --upsert
          else
            echo "Repositório já existe"
          fi

          # Criar aplicação se não existir  
          if ! argocd app get ${{values.app_name}} 2>/dev/null; then
            echo "Criando aplicação ArgoCD..."
            argocd app create ${{values.app_name}} \
              --repo "$repo_url" \
              --path charts/${{values.app_name}} \
              --dest-namespace dev \
              --dest-server https://kubernetes.default.svc \
              --values values-dev.yaml \
              --revision main \
              --sync-policy manual \
              --sync-option CreateNamespace=true
          else
            echo "Aplicação já existe"
          fi

      - name: ArgoCD app sync
        shell: bash
        run: |
          argocd app sync ${{values.app_name}}
          argocd app wait ${{values.app_name}} --timeout 180
